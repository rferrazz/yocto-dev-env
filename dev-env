#! /bin/bash

set -e

VOLUME_NAME=${1:?"Use $0 <environment_folder> to start the development environment"}
FREE_PORT=${2:-8000}
CODE_PORT=${3:-8080}

function extract_payload {
    match=$(grep --text --line-number '^PAYLOAD:$' $0 | cut -d ':' -f 1)
	payload_start=$((match + 1))
    tail -n +$payload_start $0 | tar -xzf -
}

# $1 workdir
function create_dockerfile {
    ubuntu_version=`jq -cr '.host_ubuntu_version' ${VOLUME_NAME}/manifest.json`
    extra_pkgs=`jq -r '.extra_pkgs // "" | @sh' ${VOLUME_NAME}/manifest.json`
    sed -e "\
    s/@UBUNTU_VERSION@/${ubuntu_version}/;\
    s/@EXTRA_PKGS@/${extra_pkgs}/;\
    s/@ENV_FOLDER@/${VOLUME_NAME}/" Dockerfile.template > Dockerfile
}

function create_container {
    if [[ $(docker volume ls --filter "name=${VOLUME_NAME}" -q | wc -l ) -eq 0 ]]; then
        echo "creating volume and copying setup script into it"
        docker volume create --name ${VOLUME_NAME}
        docker run -it --rm -v ${VOLUME_NAME}:/workdir busybox \
            /bin/sh -c "mkdir -p /workdir/src && chown -R 1000:1000 /workdir"
    fi

    echo "Building the development container"
    docker build -t ${VOLUME_NAME} -f Dockerfile .
}

function start_container {
    echo "Cleaning up old containers"
    docker rmi $(docker images -qa -f 'dangling=true') || echo "Nothing to remove"

    echo "Starting the development container"
    docker run --rm -it -v ${VOLUME_NAME}:/home/yoctouser -p ${FREE_PORT}:8000 -p ${CODE_PORT}:8080 ${VOLUME_NAME}
}

function main {
    extract_payload
    create_dockerfile
    create_container
    rm -rf resources Dockerfile*
    start_container
}

main ${@}
exit 0
